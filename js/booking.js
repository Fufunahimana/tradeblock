// Check if Web3 has been injected by the browser (Mist/MetaMask)
if (typeof window.ethereum !== 'undefined') {
  // Use Mist/MetaMask's provider
  var web3 = new Web3(window.ethereum);
  // Request account access if needed
  window.ethereum.enable().then((accounts) => {
      // Now you can start your app & access accounts
      interactWithContract(accounts[0]);
  }).catch((error) => {
      console.error("User denied account access");
  });
} else {
  console.log('No web3? You should consider trying MetaMask!');
  // Fallback to 192.168.1.225; use dev console port by default...
  var web3 = new Web3(new Web3.providers.HttpProvider('http://192.168.1.225:7545'));
  // interactWithContract();
}

// ABI generated by Truffle
const contractABI = [
{
  "inputs": [],
  "name": "productCount",
  "outputs": [
    {
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }
  ],
  "stateMutability": "view",
  "type": "function"
},
{
  "inputs": [
    {
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }
  ],
  "name": "products",
  "outputs": [
    {
      "internalType": "uint256",
      "name": "id",
      "type": "uint256"
    },
    {
      "internalType": "string",
      "name": "name",
      "type": "string"
    },
    {
      "internalType": "uint256",
      "name": "price",
      "type": "uint256"
    },
    {
      "internalType": "uint256",
      "name": "quantity",
      "type": "uint256"
    },
    {
      "internalType": "bool",
      "name": "available",
      "type": "bool"
    }
  ],
  "stateMutability": "view",
  "type": "function"
},
{
  "inputs": [
    {
      "internalType": "string",
      "name": "_name",
      "type": "string"
    },
    {
      "internalType": "uint256",
      "name": "_price",
      "type": "uint256"
    },
    {
      "internalType": "uint256",
      "name": "_quantity",
      "type": "uint256"
    }
  ],
  "name": "addProduct",
  "outputs": [],
  "stateMutability": "nonpayable",
  "type": "function"
},
{
  "inputs": [
    {
      "internalType": "uint256",
      "name": "_id",
      "type": "uint256"
    }
  ],
  "name": "purchaseProduct",
  "outputs": [],
  "stateMutability": "payable",
  "type": "function"
},
{
  "inputs": [
    {
      "internalType": "uint256",
      "name": "_id",
      "type": "uint256"
    }
  ],
  "name": "getProduct",
  "outputs": [
    {
      "internalType": "string",
      "name": "",
      "type": "string"
    },
    {
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    },
    {
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    },
    {
      "internalType": "bool",
      "name": "",
      "type": "bool"
    }
  ],
  "stateMutability": "view",
  "type": "function"
}
];

// Replace with your deployed contract address
const contractAddress = '0xAF03DA502C682194b49028819d984b2A2F35F876';

// Load contract
const contract = new web3.eth.Contract(contractABI, contractAddress);

// Add product
// document.getElementById('addProduct').onclick = async function() {
//   const accounts = await web3.eth.getAccounts();
//   await contract.methods.addProduct('Laptop', web3.utils.toWei('1', 'ether'), 10).send({ from: accounts[0], gas: 500000 });
//   alert('Product added');
// };

// Purchase product
async function purchaseProduct() {
  const accounts = await web3.eth.getAccounts();
  await contract.methods.purchaseProduct(1).send({ from: accounts[0], value: web3.utils.toWei('1', 'ether'), gas: 500000 });
  alert('Product purchased');
};

// Get product details
async function getProductDetails() {
  const product = await contract.methods.getProduct(1).call();
  document.getElementById('productDetails').innerText = JSON.stringify(product, null, 2);
}

getProductDetails();
